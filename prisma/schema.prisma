// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RepositoryStatus {
  PENDING
  ACTIVE
}

model Repository {
  id           String           @id @default(uuid())
  name         String
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  url          String           @unique
  instructions String
  status       RepositoryStatus @default(ACTIVE)

  Users  UserRespositoryMembership[]
  Usages Usage[]
}

enum Plan {
  FREE
  STARTER
  PREMIUM
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  username  String   @unique
  githubId  String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  plan      Plan     @default(FREE)

  Repositories UserRespositoryMembership[]
  Usages       Usage[]
}

model UserRespositoryMembership {
  id           String     @id @default(uuid())
  repositoryId String
  repository   Repository @relation(fields: [repositoryId], references: [id])
  userId       String
  user         User       @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  role         String
}

model Usage {
  id           String     @id @default(uuid())
  repositoryId String
  repository   Repository @relation(fields: [repositoryId], references: [id])
  userId       String
  user         User       @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}
